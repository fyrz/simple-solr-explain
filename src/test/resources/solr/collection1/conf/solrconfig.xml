<?xml version="1.0" encoding="UTF-8" ?>

<config>
    <luceneMatchVersion>4.10.3</luceneMatchVersion>
    <dataDir>${solr.data.dir:}</dataDir>

    <directoryFactory name="DirectoryFactory"
                      class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}">


        <!-- These will be used if you are using the solr.HdfsDirectoryFactory,
             otherwise they will be ignored. If you don't plan on using hdfs,
             you can safely remove this section. -->
        <!-- The root directory that collection data should be written to. -->
        <str name="solr.hdfs.home">${solr.hdfs.home:}</str>
        <!-- The hadoop configuration files to use for the hdfs client. -->
        <str name="solr.hdfs.confdir">${solr.hdfs.confdir:}</str>
        <!-- Enable/Disable the hdfs cache. -->
        <str name="solr.hdfs.blockcache.enabled">${solr.hdfs.blockcache.enabled:true}</str>
        <!-- Enable/Disable using one global cache for all SolrCores.
             The settings used will be from the first HdfsDirectoryFactory created. -->
        <str name="solr.hdfs.blockcache.global">${solr.hdfs.blockcache.global:true}</str>

    </directoryFactory>

    <!-- The CodecFactory for defining the format of the inverted index.
         The default implementation is SchemaCodecFactory, which is the official Lucene
         index format, but hooks into the schema to provide per-field customization of
         the postings lists and per-document values in the fieldType element
         (postingsFormat/docValuesFormat). Note that most of the alternative implementations
         are experimental, so if you choose to customize the index format, its a good
         idea to convert back to the official format e.g. via IndexWriter.addIndexes(IndexReader)
         before upgrading to a newer version to avoid unnecessary reindexing.
    -->
    <codecFactory class="solr.SchemaCodecFactory"/>
    <schemaFactory class="ClassicIndexSchemaFactory"/>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         Index Config - These settings control low-level behavior of indexing
         Most example settings here show the default value, but are commented
         out, to more easily see where customizations have been made.

         Note: This replaces <indexDefaults> and <mainIndex> from older versions
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <indexConfig>
        <!-- maxFieldLength was removed in 4.0. To get similar behavior, include a
             LimitTokenCountFilterFactory in your fieldType definition. E.g.
         <filter class="solr.LimitTokenCountFilterFactory" maxTokenCount="10000"/>
        -->
        <!-- Maximum time to wait for a write lock (ms) for an IndexWriter. Default: 1000 -->
        <!-- <writeLockTimeout>1000</writeLockTimeout>  -->

        <!-- The maximum number of simultaneous threads that may be
             indexing documents at once in IndexWriter; if more than this
             many threads arrive they will wait for others to finish.
             Default in Solr/Lucene is 8. -->
        <!-- <maxIndexingThreads>8</maxIndexingThreads>  -->

        <!-- Expert: Enabling compound file will use less files for the index,
             using fewer file descriptors on the expense of performance decrease.
             Default in Lucene is "true". Default in Solr is "false" (since 3.6) -->
        <!-- <useCompoundFile>false</useCompoundFile> -->

        <!-- ramBufferSizeMB sets the amount of RAM that may be used by Lucene
             indexing for buffering added documents and deletions before they are
             flushed to the Directory.
             maxBufferedDocs sets a limit on the number of documents buffered
             before flushing.
             If both ramBufferSizeMB and maxBufferedDocs is set, then
             Lucene will flush based on whichever limit is hit first.
             The default is 100 MB.  -->
        <!-- <ramBufferSizeMB>100</ramBufferSizeMB> -->
        <!-- <maxBufferedDocs>1000</maxBufferedDocs> -->

        <!-- Expert: Merge Policy
             The Merge Policy in Lucene controls how merging of segments is done.
             The default since Solr/Lucene 3.3 is TieredMergePolicy.
             The default since Lucene 2.3 was the LogByteSizeMergePolicy,
             Even older versions of Lucene used LogDocMergePolicy.
          -->
        <!--
            <mergePolicy class="org.apache.lucene.index.TieredMergePolicy">
              <int name="maxMergeAtOnce">10</int>
              <int name="segmentsPerTier">10</int>
            </mergePolicy>
          -->

        <!-- Merge Factor
             The merge factor controls how many segments will get merged at a time.
             For TieredMergePolicy, mergeFactor is a convenience parameter which
             will set both MaxMergeAtOnce and SegmentsPerTier at once.
             For LogByteSizeMergePolicy, mergeFactor decides how many new segments
             will be allowed before they are merged into one.
             Default is 10 for both merge policies.
          -->
        <!--
        <mergeFactor>10</mergeFactor>
          -->

        <!-- Expert: Merge Scheduler
             The Merge Scheduler in Lucene controls how merges are
             performed.  The ConcurrentMergeScheduler (Lucene 2.3 default)
             can perform merges in the background using separate threads.
             The SerialMergeScheduler (Lucene 2.2 default) does not.
         -->
        <!--
           <mergeScheduler class="org.apache.lucene.index.ConcurrentMergeScheduler"/>
           -->

        <!-- LockFactory

             This option specifies which Lucene LockFactory implementation
             to use.

             single = SingleInstanceLockFactory - suggested for a
                      read-only index or when there is no possibility of
                      another process trying to modify the index.
             native = NativeFSLockFactory - uses OS native file locking.
                      Do not use when multiple solr webapps in the same
                      JVM are attempting to share a single index.
             simple = SimpleFSLockFactory  - uses a plain file for locking

             Defaults: 'native' is default for Solr3.6 and later, otherwise
                       'simple' is the default

             More details on the nuances of each LockFactory...
             http://wiki.apache.org/lucene-java/AvailableLockFactories
        -->
        <lockType>${solr.lock.type:native}</lockType>

        <!-- Unlock On Startup

             If true, unlock any held write or commit locks on startup.
             This defeats the locking mechanism that allows multiple
             processes to safely access a lucene index, and should be used
             with care. Default is "false".

             This is not needed if lock type is 'single'
         -->
        <!--
        <unlockOnStartup>false</unlockOnStartup>
          -->

        <!-- Expert: Controls how often Lucene loads terms into memory
             Default is 128 and is likely good for most everyone.
          -->
        <!-- <termIndexInterval>128</termIndexInterval> -->

        <!-- If true, IndexReaders will be opened/reopened from the IndexWriter
             instead of from the Directory. Hosts in a master/slave setup
             should have this set to false while those in a SolrCloud
             cluster need to be set to true. Default: true
          -->
        <!--
        <nrtMode>true</nrtMode>
          -->

        <!-- Commit Deletion Policy
             Custom deletion policies can be specified here. The class must
             implement org.apache.lucene.index.IndexDeletionPolicy.

             The default Solr IndexDeletionPolicy implementation supports
             deleting index commit points on number of commits, age of
             commit point and optimized status.

             The latest commit point should always be preserved regardless
             of the criteria.
        -->
        <!--
        <deletionPolicy class="solr.SolrDeletionPolicy">
        -->
        <!-- The number of commit points to be kept -->
        <!-- <str name="maxCommitsToKeep">1</str> -->
        <!-- The number of optimized commit points to be kept -->
        <!-- <str name="maxOptimizedCommitsToKeep">0</str> -->
        <!--
            Delete all commit points once they have reached the given age.
            Supports DateMathParser syntax e.g.
          -->
        <!--
           <str name="maxCommitAge">30MINUTES</str>
           <str name="maxCommitAge">1DAY</str>
        -->
        <!--
        </deletionPolicy>
        -->

        <!-- Lucene Infostream

             To aid in advanced debugging, Lucene provides an "InfoStream"
             of detailed information when indexing.

             Setting the value to true will instruct the underlying Lucene
             IndexWriter to write its info stream to solr's log. By default,
             this is enabled here, and controlled through log4j.properties.
          -->
        <infoStream>true</infoStream>

        <!--
            Use true to enable this safety check, which can help
            reduce the risk of propagating index corruption from older segments
            into new ones, at the expense of slower merging.
        -->
        <checkIntegrityAtMerge>false</checkIntegrityAtMerge>
    </indexConfig>


    <!-- JMX

         This example enables JMX if and only if an existing MBeanServer
         is found, use this if you want to configure JMX through JVM
         parameters. Remove this to disable exposing Solr configuration
         and statistics to JMX.

         For more details see http://wiki.apache.org/solr/SolrJmx
      -->
    <jmx/>
    <!-- If you want to connect to a particular server, specify the
         agentId
      -->
    <!-- <jmx agentId="myAgent" /> -->
    <!-- If you want to start a new MBeanServer, specify the serviceUrl -->
    <!-- <jmx serviceUrl="service:jmx:rmi:///jndi/rmi://localhost:9999/solr"/>
      -->

    <!-- The default high-performance update handler -->
    <updateHandler class="solr.DirectUpdateHandler2">

        <!-- Enables a transaction log, used for real-time get, durability, and
             and solr cloud replica recovery.  The log can grow as big as
             uncommitted changes to the index, so use of a hard autoCommit
             is recommended (see below).
             "dir" - the target directory for transaction logs, defaults to the
                    solr data directory.  -->
        <updateLog>
            <str name="dir">${solr.ulog.dir:}</str>
        </updateLog>

        <!-- AutoCommit

             Perform a hard commit automatically under certain conditions.
             Instead of enabling autoCommit, consider using "commitWithin"
             when adding documents.

             http://wiki.apache.org/solr/UpdateXmlMessages

             maxDocs - Maximum number of documents to add since the last
                       commit before automatically triggering a new commit.

             maxTime - Maximum amount of time in ms that is allowed to pass
                       since a document was added before automatically
                       triggering a new commit.
             openSearcher - if false, the commit causes recent index changes
               to be flushed to stable storage, but does not cause a new
               searcher to be opened to make those changes visible.

             If the updateLog is enabled, then it's highly recommended to
             have some sort of hard autoCommit to limit the log size.
          -->
        <autoCommit>
            <maxTime>${solr.autoCommit.maxTime:15000}</maxTime>
            <openSearcher>false</openSearcher>
        </autoCommit>

        <!-- softAutoCommit is like autoCommit except it causes a
             'soft' commit which only ensures that changes are visible
             but does not ensure that data is synced to disk.  This is
             faster and more near-realtime friendly than a hard commit.
          -->

        <autoSoftCommit>
            <maxTime>${solr.autoSoftCommit.maxTime:-1}</maxTime>
        </autoSoftCommit>

        <!-- Update Related Event Listeners

             Various IndexWriter related events can trigger Listeners to
             take actions.

             postCommit - fired after every commit or optimize command
             postOptimize - fired after every optimize command
          -->
        <!-- The RunExecutableListener executes an external command from a
             hook such as postCommit or postOptimize.

             exe - the name of the executable to run
             dir - dir to use as the current working directory. (default=".")
             wait - the calling thread waits until the executable returns.
                    (default="true")
             args - the arguments to pass to the program.  (default is none)
             env - environment variables to set.  (default is none)
          -->
        <!-- This example shows how RunExecutableListener could be used
             with the script based replication...
             http://wiki.apache.org/solr/CollectionDistribution
          -->
        <!--
           <listener event="postCommit" class="solr.RunExecutableListener">
             <str name="exe">solr/bin/snapshooter</str>
             <str name="dir">.</str>
             <bool name="wait">true</bool>
             <arr name="args"> <str>arg1</str> <str>arg2</str> </arr>
             <arr name="env"> <str>MYVAR=val1</str> </arr>
           </listener>
          -->

    </updateHandler>

    <!-- IndexReaderFactory

         Use the following format to specify a custom IndexReaderFactory,
         which allows for alternate IndexReader implementations.

         ** Experimental Feature **

         Please note - Using a custom IndexReaderFactory may prevent
         certain other features from working. The API to
         IndexReaderFactory may change without warning or may even be
         removed from future releases if the problems cannot be
         resolved.


         ** Features that may not work with custom IndexReaderFactory **

         The ReplicationHandler assumes a disk-resident index. Using a
         custom IndexReader implementation may cause incompatibility
         with ReplicationHandler and may cause replication to not work
         correctly. See SOLR-1366 for details.

      -->
    <!--
    <indexReaderFactory name="IndexReaderFactory" class="package.class">
      <str name="someArg">Some Value</str>
    </indexReaderFactory >
    -->
    <!-- By explicitly declaring the Factory, the termIndexDivisor can
         be specified.
      -->
    <!--
       <indexReaderFactory name="IndexReaderFactory"
                           class="solr.StandardIndexReaderFactory">
         <int name="setTermIndexDivisor">12</int>
       </indexReaderFactory >
      -->

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         Query section - these settings control query time things like caches
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <query>
        <maxBooleanClauses>1024</maxBooleanClauses>

        <enableLazyFieldLoading>true</enableLazyFieldLoading>
        <queryResultWindowSize>20</queryResultWindowSize>
        <queryResultMaxDocsCached>200</queryResultMaxDocsCached>

        <listener event="newSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
            </arr>
        </listener>
        <listener event="firstSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
            </arr>
        </listener>

        <useColdSearcher>false</useColdSearcher>
        <maxWarmingSearchers>2</maxWarmingSearchers>
    </query>


    <!-- Request Dispatcher

         This section contains instructions for how the SolrDispatchFilter
         should behave when processing requests for this SolrCore.

         handleSelect is a legacy option that affects the behavior of requests
         such as /select?qt=XXX

         handleSelect="true" will cause the SolrDispatchFilter to process
         the request and dispatch the query to a handler specified by the
         "qt" param, assuming "/select" isn't already registered.

         handleSelect="false" will cause the SolrDispatchFilter to
         ignore "/select" requests, resulting in a 404 unless a handler
         is explicitly registered with the name "/select"

         handleSelect="true" is not recommended for new users, but is the default
         for backwards compatibility
      -->
    <requestDispatcher handleSelect="false">
        <!-- Request Parsing

             These settings indicate how Solr Requests may be parsed, and
             what restrictions may be placed on the ContentStreams from
             those requests

             enableRemoteStreaming - enables use of the stream.file
             and stream.url parameters for specifying remote streams.

             multipartUploadLimitInKB - specifies the max size (in KiB) of
             Multipart File Uploads that Solr will allow in a Request.

             formdataUploadLimitInKB - specifies the max size (in KiB) of
             form data (application/x-www-form-urlencoded) sent via
             POST. You can use POST to pass request parameters not
             fitting into the URL.

             addHttpRequestToContext - if set to true, it will instruct
             the requestParsers to include the original HttpServletRequest
             object in the context map of the SolrQueryRequest under the
             key "httpRequest". It will not be used by any of the existing
             Solr components, but may be useful when developing custom
             plugins.

             *** WARNING ***
             The settings below authorize Solr to fetch remote files, You
             should make sure your system has some authentication before
             using enableRemoteStreaming="true"

          -->
        <requestParsers enableRemoteStreaming="true"
                        multipartUploadLimitInKB="2048000"
                        formdataUploadLimitInKB="2048"
                        addHttpRequestToContext="false"/>

        <!-- HTTP Caching

             Set HTTP caching related parameters (for proxy caches and clients).

             The options below instruct Solr not to output any HTTP Caching
             related headers
          -->
        <httpCaching never304="true"/>
        <!-- If you include a <cacheControl> directive, it will be used to
             generate a Cache-Control header (as well as an Expires header
             if the value contains "max-age=")

             By default, no Cache-Control header is generated.

             You can use the <cacheControl> option even if you have set
             never304="true"
          -->
        <!--
           <httpCaching never304="true" >
             <cacheControl>max-age=30, public</cacheControl>
           </httpCaching>
          -->
        <!-- To enable Solr to respond with automatically generated HTTP
             Caching headers, and to response to Cache Validation requests
             correctly, set the value of never304="false"

             This will cause Solr to generate Last-Modified and ETag
             headers based on the properties of the Index.

             The following options can also be specified to affect the
             values of these headers...

             lastModFrom - the default value is "openTime" which means the
             Last-Modified value (and validation against If-Modified-Since
             requests) will all be relative to when the current Searcher
             was opened.  You can change it to lastModFrom="dirLastMod" if
             you want the value to exactly correspond to when the physical
             index was last modified.

             etagSeed="..." is an option you can change to force the ETag
             header (and validation against If-None-Match requests) to be
             different even if the index has not changed (ie: when making
             significant changes to your config file)

             (lastModifiedFrom and etagSeed are both ignored if you use
             the never304="true" option)
          -->
        <!--
           <httpCaching lastModifiedFrom="openTime"
                        etagSeed="Solr">
             <cacheControl>max-age=30, public</cacheControl>
           </httpCaching>
          -->
    </requestDispatcher>

    <!-- Request Handlers

         http://wiki.apache.org/solr/SolrRequestHandler

         Incoming queries will be dispatched to a specific handler by name
         based on the path specified in the request.

         Legacy behavior: If the request path uses "/select" but no Request
         Handler has that name, and if handleSelect="true" has been specified in
         the requestDispatcher, then the Request Handler is dispatched based on
         the qt parameter.  Handlers without a leading '/' are accessed this way
         like so: http://host/app/[core/]select?qt=name  If no qt is
         given, then the requestHandler that declares default="true" will be
         used or the one named "standard".

         If a Request Handler is declared with startup="lazy", then it will
         not be initialized until the first request that uses it.

      -->
    <!-- SearchHandler

         http://wiki.apache.org/solr/SearchHandler

         For processing Search Queries, the primary Request Handler
         provided with Solr is "SearchHandler" It delegates to a sequent
         of SearchComponents (see below) and supports distributed
         queries across multiple shards
      -->
    <requestHandler name="/select" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <int name="rows">10</int>
            <str name="defType">edismax</str>
            <str name="qf">description^.2 title^10.0</str>
            <str name="tie">0.5</str>
        </lst>

    </requestHandler>

    <!-- Field Analysis Request Handler

          RequestHandler that provides much the same functionality as
          analysis.jsp. Provides the ability to specify multiple field
          types and field names in the same request and outputs
          index-time and query-time analysis for each of them.

          Request parameters are:
          analysis.fieldname - field name whose analyzers are to be used

          analysis.fieldtype - field type whose analyzers are to be used
          analysis.fieldvalue - text for index-time analysis
          q (or analysis.q) - text for query time analysis
          analysis.showmatch (true|false) - When set to true and when
              query analysis is performed, the produced tokens of the
              field value analysis will be marked as "matched" for every
              token that is produces by the query analysis
      -->
    <requestHandler name="/analysis/field"
                    startup="lazy"
                    class="solr.FieldAnalysisRequestHandler"/>


    <!-- Document Analysis Handler

         http://wiki.apache.org/solr/AnalysisRequestHandler

         An analysis handler that provides a breakdown of the analysis
         process of provided documents. This handler expects a (single)
         content stream with the following format:

         <docs>
           <doc>
             <field name="documentId">1</field>
             <field name="name">The Name</field>
             <field name="text">The Text Value</field>
           </doc>
           <doc>...</doc>
           <doc>...</doc>
           ...
         </docs>

      Note: Each document must contain a field which serves as the
      unique key. This key is used in the returned response to associate
      an analysis breakdown to the analyzed document.

      Like the FieldAnalysisRequestHandler, this handler also supports
      query analysis by sending either an "analysis.query" or "q"
      request parameter that holds the query text to be analyzed. It
      also supports the "analysis.showmatch" parameter which when set to
      true, all field tokens that match the query tokens will be marked
      as a "match".
    -->
    <requestHandler name="/analysis/document"
                    class="solr.DocumentAnalysisRequestHandler"
                    startup="lazy"/>


    <queryResponseWriter name="json" class="solr.JSONResponseWriter">
        <!-- For the purposes of the tutorial, JSON responses are written as
         plain text so that they are easy to read in *any* browser.
         If you expect a MIME type of "application/json" just remove this override.
        -->
        <str name="content-type">text/plain; charset=UTF-8</str>
    </queryResponseWriter>

    <!--
       Custom response writers can be declared as needed...
      -->
    <queryResponseWriter name="simpleExplainJson" class="org.solr.contrib.plugin.response.SimpleExplainJsonResponseWriter"
                         startup="lazy"/>

    <!-- Legacy config for the admin interface -->
    <admin>
        <defaultQuery>*:*</defaultQuery>
    </admin>

</config>
